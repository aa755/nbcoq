/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package coq;

import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JTree;
import javax.swing.ScrollPaneConstants;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import org.openide.util.Exceptions;


/**
 *
 * @author Abhishek
 */
public class ProofError extends javax.swing.JPanel {

    private cqDataObject editorDoc;
    private final DefaultTreeModel model;
    nu.xom.Elements allGoals;
    ProofSubgoal curGoal;
    private final JPanel proofRootPanel;
    /**
     * Creates new form ProofError
     */
    public ProofError() {
        initComponents();
        editorDoc=null;
        model=new DefaultTreeModel(null);
        jTree1.setModel(model);
        proofRootPanel=new JPanel();
        BoxLayout bl=new BoxLayout(proofRootPanel, BoxLayout.Y_AXIS);
        proofScroll.getViewport().add(proofRootPanel);
        proofScroll.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        proofRootPanel.setLayout(bl);
        //proofRootPanel.setMaximumSize(new Dimension(this.getWidth(),Integer.MAX_VALUE ));
    }

    void validateScroll()
    {
        proofScroll.validate();
    }
    
    void setDebugMesg(String mesg)
    {
        jTextArea1.setText(mesg);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        downCursorButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        followCompile = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jSplitPane1 = new javax.swing.JSplitPane();
        proofScroll = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        goalOption = new javax.swing.JRadioButton();
        jumpButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        topButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(downCursorButton, org.openide.util.NbBundle.getMessage(ProofError.class, "ProofError.downCursorButton.text")); // NOI18N
        downCursorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downCursorButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(downButton, org.openide.util.NbBundle.getMessage(ProofError.class, "ProofError.downButton.text")); // NOI18N
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(followCompile, org.openide.util.NbBundle.getMessage(ProofError.class, "ProofError.followCompile.text")); // NOI18N
        followCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                followCompileActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jTree1);

        jSplitPane1.setDividerLocation(700);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setLeftComponent(proofScroll);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jSplitPane1.setRightComponent(jScrollPane1);

        goalOption.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(goalOption, org.openide.util.NbBundle.getMessage(ProofError.class, "ProofError.goalOption.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jumpButton, org.openide.util.NbBundle.getMessage(ProofError.class, "ProofError.jumpButton.text")); // NOI18N
        jumpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jumpButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(upButton, org.openide.util.NbBundle.getMessage(ProofError.class, "ProofError.upButton.text")); // NOI18N
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(topButton, org.openide.util.NbBundle.getMessage(ProofError.class, "ProofError.topButton.text")); // NOI18N
        topButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(downCursorButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(downButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(upButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(topButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jumpButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(goalOption)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(followCompile)
                        .addGap(0, 159, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jumpButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(downCursorButton)
                        .addComponent(downButton)
                        .addComponent(followCompile)
                        .addComponent(upButton)
                        .addComponent(topButton)
                        .addComponent(goalOption)))
                .addGap(18, 18, 18)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void downCursorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downCursorButtonActionPerformed
        // TODO add your handling code here:
        if(editorDoc==null)
        {
            setDebugMesg("upButton: no coq document is associated w/ this window. this could be a bug");
        }
       disableCompileButtons();
       editorDoc.handleDownToCursor();
        
    }//GEN-LAST:event_downCursorButtonActionPerformed

    void disableCompileButtons()
    {
        downButton.setEnabled(false);
        downCursorButton.setEnabled(false);
    }
    
    public void enableCompileButtons()
    {
       downButton.setEnabled(true);
       downCursorButton.setEnabled(true);
       jTextArea1.setText(editorDoc.getDbugcontents());           
    }
    
    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        // TODO add your handling code here:
        if(editorDoc==null)
        {
            setDebugMesg("downButton: no coq document is associated w/ this window. this could be a bug");
            
        }
        
       disableCompileButtons();
       editorDoc.handleDownButton();
    }//GEN-LAST:event_downButtonActionPerformed

    private void followCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_followCompileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_followCompileActionPerformed

    private void jumpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jumpButtonActionPerformed
        // TODO add your handling code here:
        editorDoc.jumpToCompileOffest();
    }//GEN-LAST:event_jumpButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        // TODO add your handling code here:
        editorDoc.handleUpButton();
    }//GEN-LAST:event_upButtonActionPerformed

    private void topButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topButtonActionPerformed
        // TODO add your handling code here:
        editorDoc.handleUppButton();
    }//GEN-LAST:event_topButtonActionPerformed

    public DefaultMutableTreeNode buildnu(nu.xom.Element e) {   
   DefaultMutableTreeNode result = new DefaultMutableTreeNode(""+e.toXML());
  
    nu.xom.Elements children=e.getChildElements();
    
   for(int i=0;i< children.size();i++) {
      nu.xom.Element child =  children.get(i);
      result.add(buildnu(child));
   }
   return result;         
}

public void resetTree(nu.xom.Document doc) throws Exception {
    if(doc==null)
        return;
       DefaultMutableTreeNode root=buildnu(doc.getRootElement());
      model.setRoot(root);
       System.out.flush();
      model.reload();
      model.nodeStructureChanged((TreeNode) model.getRoot());
             
}
void setAllGoals(nu.xom.Document prg)
{
   
    allGoals=null;
    if(prg==null)
        return;
//    nu.xom.Element root=prg.getRootElement();
    nu.xom.Element option=prg.getRootElement().getFirstChildElement("option");
    if(option==null)
        return;
    nu.xom.Element goals =option.getFirstChildElement("goals");
    if(goals==null)
        return;
    nu.xom.Element list=goals.getFirstChildElement("list");
    allGoals=list.getChildElements("goal");    
}


void displayGoal(int index)
{
     proofRootPanel.removeAll();
    if(allGoals==null || allGoals.size()==0)
    {
        proofRootPanel.validate();
        proofRootPanel.repaint();
        return;
    }
    curGoal=new ProofSubgoal(allGoals.get(index));
    int maxWidth=proofScroll.getViewport().getWidth();
    Dimension dim=proofRootPanel.getMaximumSize();
    dim.width=maxWidth;
    proofRootPanel.setMaximumSize(dim);
    validateScroll();
    curGoal.showSubgoal(proofRootPanel,maxWidth);
    proofRootPanel.revalidate();
    proofRootPanel.repaint();
}

public boolean isShowGoalChecked()
{
    return goalOption.isSelected();
}
public boolean isFollowCursorChecked()
{
    return followCompile.isSelected();
}

void showGoal()
{
try {
            //jTextArea1.setText(editorDoc.getGoal());
            resetTree(editorDoc.getGoal());
            setAllGoals(editorDoc.getGoal());
            displayGoal(0);
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }    
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton downButton;
    private javax.swing.JButton downCursorButton;
    private javax.swing.JRadioButton followCompile;
    private javax.swing.JRadioButton goalOption;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTree jTree1;
    private javax.swing.JButton jumpButton;
    private javax.swing.JScrollPane proofScroll;
    private javax.swing.JButton topButton;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables

    /**
     * @param editorDoc the editorDoc to set
     */
    public void setEditorDoc(cqDataObject editorDoc) {
        this.editorDoc = editorDoc;
        editorDoc.setUiWindow(this);
    }
}
